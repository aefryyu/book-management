version: '3'

vars:
  GOOS: "{{default OS .GOOS}}"
  MVNW: '{{if eq .GOOS "windows"}}mvnw.cmd{{else}}./mvnw{{end}}'
  DC_DIR: "deployment/docker-compose"
  INFRA_DC_FILE: "{{.DC_DIR}}/infra.yml"
  APPS_DC_FILE: "{{.DC_DIR}}/apps.yml"
  SHELL_CMD: '{{if eq .GOOS "windows"}}cmd /c{{else}}sh -c{{end}}'

tasks:
  default:
    cmds:
      - task: test

  test:
    deps: [format]
    cmds:
      - "{{.SHELL_CMD}} '{{.MVNW}} clean test'"

  format:
    cmds:
      - "{{.SHELL_CMD}} '{{.MVNW}} spotless:apply'"

  build:
    cmds:
      - "{{.SHELL_CMD}} '{{.MVNW}} -pl catalog-service spring-boot:build-image -DskipTests'"
      - "{{.SHELL_CMD}} '{{.MVNW}} -pl order-service spring-boot:build-image -DskipTests'"
      - "{{.SHELL_CMD}} '{{.MVNW}} -pl notification-service spring-boot:build-image -DskipTests'"
      - "{{.SHELL_CMD}} '{{.MVNW}} -pl api-gateway spring-boot:build-image -DskipTests'"
      - "{{.SHELL_CMD}} '{{.MVNW}} -pl book-webapp spring-boot:build-image -DskipTests'"

  start:
    deps: [build]
    cmds:
      - docker compose -f "{{.INFRA_DC_FILE}}" -f "{{.APPS_DC_FILE}}" up -d

  stop:
    cmds:
      - docker compose -f "{{.INFRA_DC_FILE}}" -f "{{.APPS_DC_FILE}}" stop
      - docker compose -f "{{.INFRA_DC_FILE}}" -f "{{.APPS_DC_FILE}}" rm -f

  restart:
    cmds:
      - task: stop
      - task: sleep
      - task: start

  start_monitoring:
    cmds:
      - docker compose -f {{.MONITORING_DC_FILE}} up -d

    stop_monitoring:
      cmds:
        - docker compose -f {{.MONITORING_DC_FILE}} stop
        - docker compose -f {{.MONITORING_DC_FILE}} rm -f

    restart_monitoring:
      cmds:
        - task: stop_monitoring
        - task: sleep
        - task: start_monitoring

  sleep:
    vars:
      DURATION: '{{default 5 .DURATION}}'
    cmds:
      - |
        {{if eq .GOOS "windows"}}
        powershell -Command "Start-Sleep -Seconds {{.DURATION}}"
        {{else}}
        sleep {{.DURATION}}
        {{end}}
